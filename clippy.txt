warning: empty lines after doc comment
   --> src/arc.rs:485:1
    |
485 | / /// Check if the arc contains the point.
...   |
521 | |
    | |_^
...
545 |   pub fn arc_is_collapsed_radius(r: f64, eps: f64) -> bool {
    |   ------------------------------ the comment documents this function
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments
    = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default
    = help: if the empty lines are unintentional, remove them
help: if the doc comment should not document function `arc_is_collapsed_radius` then comment it out
    |
485 | // /// Check if the arc contains the point.
    | ++

warning: binding's name is too similar to existing binding
   --> src/arc.rs:631:9
    |
631 |     let dist_b_c = (arc.b - arc.c).norm();
    |         ^^^^^^^^
    |
note: existing binding defined here
   --> src/arc.rs:630:9
    |
630 |     let dist_a_c = (arc.a - arc.c).norm();
    |         ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names
    = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::similar_names)]`

warning: 8 bindings with single-character names in scope
   --> src/point.rs:424:9
    |
424 |         a: Point,
    |         ^
425 |         b: Point,
    |         ^
426 |         c: Point,
    |         ^
427 |         d: Point,
    |         ^
...
461 |         let e = point(tt.0.x, tt.0.y);
    |             ^
462 |         let f = point(tt.1.x, tt.1.y);
    |             ^
463 |         let g = point(tt.2.x, tt.2.y);
    |             ^
464 |         let h = point(tt.3.x, tt.3.y);
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names
    = note: `-W clippy::many-single-char-names` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::many_single_char_names)]`

warning: binding's name is too similar to existing binding
   --> src/polyline.rs:132:13
    |
132 |     let mut res: Polyline = Vec::with_capacity(poly.len());
    |             ^^^
    |
note: existing binding defined here
   --> src/polyline.rs:130:13
    |
130 |     let mut rev = poly.clone();
    |             ^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: redundant else block
  --> src/algo/bounding.rs:73:10
   |
73 |           } else {
   |  __________^
74 | |             // Point case
75 | |             return Circle::new(arc.a, 0.0);
76 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
   = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::redundant_else)]`
help: remove the `else` block and move the contents out
   |
73 ~         }
74 +         // Point case
75 +         return Circle::new(arc.a, 0.0);
   |

warning: redundant else block
   --> src/algo/bounding.rs:896:10
    |
896 |           } else {
    |  __________^
897 | |             // Point case
898 | |             return Rect::new(arc.a, arc.a);
899 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
896 ~         }
897 +         // Point case
898 +         return Rect::new(arc.a, arc.a);
    |

warning: 5 bindings with single-character names in scope
   --> src/utils.rs:396:14
    |
396 | pub fn min_5(a: f64, b: f64, c: f64, d: f64, e: f64) -> f64 {
    |              ^       ^       ^       ^       ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: binding's name is too similar to existing binding
  --> src/distance/dist_arc_arc.rs:77:17
   |
77 |             let dists = [(p0 - p2).norm(), (p1 - p2).norm()];
   |                 ^^^^^
   |
note: existing binding defined here
  --> src/distance/dist_arc_arc.rs:44:9
   |
44 |     let dist0 = match dist_point_arc(&arc0.a, arc1) {
   |         ^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
  --> src/distance/dist_arc_arc.rs:85:17
   |
85 |             let dists = [(p0 - p1).norm(), (p0 - p2).norm()];
   |                 ^^^^^
   |
note: existing binding defined here
  --> src/distance/dist_arc_arc.rs:44:9
   |
44 |     let dist0 = match dist_point_arc(&arc0.a, arc1) {
   |         ^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
  --> src/distance/dist_arc_arc.rs:93:17
   |
93 |             let dists = [
   |                 ^^^^^
   |
note: existing binding defined here
  --> src/distance/dist_arc_arc.rs:44:9
   |
44 |     let dist0 = match dist_point_arc(&arc0.a, arc1) {
   |         ^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:128:18
    |
128 |                   } else {
    |  __________________^
129 | |                     if arc0.a != arc1.b {
130 | |                         // Arc0 and Arc1 overlap, <B0,A0,B1,A1>.
131 | |                         let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
...   |
139 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
128 ~                 }
129 +                 if arc0.a != arc1.b {
130 +                     // Arc0 and Arc1 overlap, <B0,A0,B1,A1>.
131 +                     let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
132 +                     return ArcArcConfig::CocircularOneArc2(res_arc0);
133 +                 } else {
134 +                     // Arc0 and arc1 share endpoint, <B0,A0,B1,A1>
135 +                     // with A0 = B1.
136 +                     let res_point0 = arc0.a;
137 +                     return ArcArcConfig::CocircularOnePoint0(res_point0);
138 +                 }
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:124:22
    |
124 |                       } else {
    |  ______________________^
125 | |                         // Arc0 inside Arc1, <B0,A0,A1,B1>.
126 | |                         return ArcArcConfig::CocircularOneArc1(arc0.clone());
127 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
124 ~                     }
125 +                     // Arc0 inside Arc1, <B0,A0,A1,B1>.
126 +                     return ArcArcConfig::CocircularOneArc1(arc0.clone());
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:83:26
    |
83  |                           } else {
    |  __________________________^
84  | |                             // arc0 and arc1 overlap in two disjoint subsets.
85  | |                             if arc0.a != arc1.b {
86  | |                                 if arc1.a != arc0.b {
...   |
123 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
83  ~                         }
84  +                         // arc0 and arc1 overlap in two disjoint subsets.
85  +                         if arc0.a != arc1.b {
86  +                             if arc1.a != arc0.b {
87  +                                 // The arcs overlap in two disjoint
88  +                                 // subarcs, each of positive subtended
89  +                                 // angle: <A0,B1>, <A1,B0>
90  +                                 let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
91  +                                 let res_arc1 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
92  +                                 return ArcArcConfig::CocircularTwoArcs(res_arc0, res_arc1);
93  +                             } else {
94  +                                 // B0 = A1
95  +                                 // The intersection is a point {A1}
96  +                                 // and an arc <A0,B1>.
97  +                                 let res_point0 = arc0.b;
98  +                                 let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
99  +                                 return ArcArcConfig::CocircularOnePointOneArc0(
100 +                                     res_point0, res_arc0,
101 +                                 );
102 +                             }
103 +                         } else {
104 +                             // A0 = B1
105 +                             if arc1.a != arc0.b {
106 +                                 // The intersection is a point {A0}
107 +                                 // and an arc <A1,B0>.
108 +                                 let res_point0 = arc0.a;
109 +                                 let res_arc0 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
110 +                                 return ArcArcConfig::CocircularOnePointOneArc1(
111 +                                     res_point0, res_arc0,
112 +                                 );
113 +                             } else {
114 +                                 // The arcs shared endpoints, so the
115 +                                 // union is a circle.
116 +                                 let res_point0 = arc0.a;
117 +                                 let res_point1 = arc0.b;
118 +                                 return ArcArcConfig::CocircularTwoPoints(
119 +                                     res_point0, res_point1,
120 +                                 );
121 +                             }
122 +                         }
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:103:30
    |
103 |   ...                   } else {
    |  ________________________^
104 | | ...                       // A0 = B1
105 | | ...                       if arc1.a != arc0.b {
...   |
122 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
103 ~                             }
104 +                             // A0 = B1
105 +                             if arc1.a != arc0.b {
106 +                                 // The intersection is a point {A0}
107 +                                 // and an arc <A1,B0>.
108 +                                 let res_point0 = arc0.a;
109 +                                 let res_arc0 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
110 +                                 return ArcArcConfig::CocircularOnePointOneArc1(
111 +                                     res_point0, res_arc0,
112 +                                 );
113 +                             } else {
114 +                                 // The arcs shared endpoints, so the
115 +                                 // union is a circle.
116 +                                 let res_point0 = arc0.a;
117 +                                 let res_point1 = arc0.b;
118 +                                 return ArcArcConfig::CocircularTwoPoints(
119 +                                     res_point0, res_point1,
120 +                                 );
121 +                             }
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:93:34
    |
93  |   ...                   } else {
    |  ________________________^
...   |
101 | | ...                       );
102 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
93  ~                                 }
94  +                                 // B0 = A1
95  +                                 // The intersection is a point {A1}
96  +                                 // and an arc <A0,B1>.
97  +                                 let res_point0 = arc0.b;
98  +                                 let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
99  +                                 return ArcArcConfig::CocircularOnePointOneArc0(
100 +                                     res_point0, res_arc0,
101 +                                 );
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:113:34
    |
113 |   ...                   } else {
    |  ________________________^
114 | | ...                       // The arcs shared endpoints, so the
115 | | ...                       // union is a circle.
116 | | ...                       let res_point0 = arc0.a;
...   |
120 | | ...                       );
121 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
113 ~                                 }
114 +                                 // The arcs shared endpoints, so the
115 +                                 // union is a circle.
116 +                                 let res_point0 = arc0.a;
117 +                                 let res_point1 = arc0.b;
118 +                                 return ArcArcConfig::CocircularTwoPoints(
119 +                                     res_point0, res_point1,
120 +                                 );
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:133:22
    |
133 |                       } else {
    |  ______________________^
134 | |                         // Arc0 and arc1 share endpoint, <B0,A0,B1,A1>
135 | |                         // with A0 = B1.
136 | |                         let res_point0 = arc0.a;
137 | |                         return ArcArcConfig::CocircularOnePoint0(res_point0);
138 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
133 ~                     }
134 +                     // Arc0 and arc1 share endpoint, <B0,A0,B1,A1>
135 +                     // with A0 = B1.
136 +                     let res_point0 = arc0.a;
137 +                     return ArcArcConfig::CocircularOnePoint0(res_point0);
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:147:18
    |
147 |                   } else {
    |  __________________^
148 | |                     // Arc0 and arc1 share endpoint, <A0,B0,A1,B1>
149 | |                     // with B0 = A1.
150 | |                     let res_point0 = arc1.a;
151 | |                     return ArcArcConfig::CocircularOnePoint1(res_point0);
152 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
147 ~                 }
148 +                 // Arc0 and arc1 share endpoint, <A0,B0,A1,B1>
149 +                 // with B0 = A1.
150 +                 let res_point0 = arc1.a;
151 +                 return ArcArcConfig::CocircularOnePoint1(res_point0);
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:158:14
    |
158 |               } else {
    |  ______________^
159 | |                 // Arcs do not overlap, <A0,A1,B0,B1>.
160 | |                 return ArcArcConfig::NoIntersection();
161 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
158 ~             }
159 +             // Arcs do not overlap, <A0,A1,B0,B1>.
160 +             return ArcArcConfig::NoIntersection();
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:173:14
    |
173 |               } else {
    |  ______________^
174 | |                 return ArcArcConfig::NoIntersection();
175 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
173 ~             }
174 +             return ArcArcConfig::NoIntersection();
    |

warning: redundant else block
   --> src/intersection/int_arc_arc.rs:169:18
    |
169 |                   } else {
    |  __________________^
170 | |                     // The arcs intersect in a single point.
171 | |                     return ArcArcConfig::NonCocircularOnePoint(point0);
172 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
169 ~                 }
170 +                 // The arcs intersect in a single point.
171 +                 return ArcArcConfig::NonCocircularOnePoint(point0);
    |

warning: binding's name is too similar to existing binding
  --> src/intersection/int_circle_circle.rs:76:9
   |
76 |     let r0_p_r1 = r0 + r1;
   |         ^^^^^^^
   |
note: existing binding defined here
  --> src/intersection/int_circle_circle.rs:63:9
   |
63 |     let r0_m_r1 = r0 - r1;
   |         ^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
  --> src/intersection/int_circle_circle.rs:77:9
   |
77 |     let r0_p_r1_sqr = r0_p_r1 * r0_p_r1;
   |         ^^^^^^^^^^^
   |
note: existing binding defined here
  --> src/intersection/int_circle_circle.rs:70:9
   |
70 |     let r0_m_r1_sqr = r0_m_r1 * r0_m_r1;
   |         ^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: redundant else block
   --> src/intersection/int_circle_circle.rs:115:6
    |
115 |       } else {
    |  ______^
116 | |         // |U| = |R0+R1|, circles are tangent.
117 | |         let p0 = circle0.c + u * (r0 / r0_p_r1);
118 | |         return CircleCircleConfig::NoncocircularOnePoint(p0);
119 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
115 ~     }
116 +     // |U| = |R0+R1|, circles are tangent.
117 +     let p0 = circle0.c + u * (r0 / r0_p_r1);
118 +     return CircleCircleConfig::NoncocircularOnePoint(p0);
    |

warning: redundant else block
   --> src/intersection/int_circle_circle.rs:110:10
    |
110 |           } else {
    |  __________^
111 | |             // |U| = |R0-R1|, circles are tangent.
112 | |             let p0 = circle0.c + u * (r0 / r0_m_r1);
113 | |             return CircleCircleConfig::NoncocircularOnePoint(p0);
114 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
110 ~         }
111 +         // |U| = |R0-R1|, circles are tangent.
112 +         let p0 = circle0.c + u * (r0 / r0_m_r1);
113 +         return CircleCircleConfig::NoncocircularOnePoint(p0);
    |

warning: redundant else block
   --> src/intersection/int_circle_circle.rs:106:14
    |
106 |               } else {
    |  ______________^
107 | |                 // t==0.0
108 | |                 return CircleCircleConfig::NoncocircularOnePoint(p0);
109 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
106 ~             }
107 +             // t==0.0
108 +             return CircleCircleConfig::NoncocircularOnePoint(p0);
    |

warning: redundant else block
  --> src/intersection/int_interval_interval.rs:65:6
   |
65 |       } else {
   |  ______^
66 | |         // interval0[1] == interval1[0]
67 | |         return IntervalConfig::Touching(interval0.1);
68 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
65 ~     }
66 +     // interval0[1] == interval1[0]
67 +     return IntervalConfig::Touching(interval0.1);
   |

warning: redundant else block
  --> src/intersection/int_interval_interval.rs:61:10
   |
61 |           } else {
   |  __________^
62 | |             // interval0[0] == interval1[1]
63 | |             return IntervalConfig::Touching(interval0.0);
64 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
61 ~         }
62 +         // interval0[0] == interval1[1]
63 +         return IntervalConfig::Touching(interval0.0);
   |

warning: redundant else block
  --> src/intersection/int_interval_interval.rs:57:14
   |
57 |               } else {
   |  ______________^
58 | |                 // case with degenerate intervals
59 | |                 return IntervalConfig::Overlap(overlap0, overlap0);
60 | |             }
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
57 ~             }
58 +             // case with degenerate intervals
59 +             return IntervalConfig::Overlap(overlap0, overlap0);
   |

warning: redundant else block
  --> src/intersection/int_line_arc.rs:49:14
   |
49 |               } else {
   |  ______________^
50 | |                 return LineArcConfig::NoIntersection();
51 | |             }
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
49 ~             }
50 +             return LineArcConfig::NoIntersection();
   |

warning: redundant else block
  --> src/intersection/int_line_circle.rs:58:6
   |
58 |       } else {
   |  ______^
...  |
66 | |         return LineCircleConfig::OnePoint(point0, parameter0);
67 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
58 ~     }
59 +     // discr == 0
60 +     // The line is tangent to the circle. Set the parameters to
61 +     // the same number because other queries involving linear
62 +     // components and circular components use interval-interval
63 +     // intersection tests which consume both parameters.
64 +     let parameter0 = -a1;
65 +     let point0 = line.origin + line.dir * parameter0;
66 +     return LineCircleConfig::OnePoint(point0, parameter0);
   |

warning: redundant else block
  --> src/intersection/int_line_line.rs:56:6
   |
56 |       } else {
   |  ______^
57 | |         // The lines are parallel.
58 | |         let dot_qperp_d1 = q.perp(line1.dir);
59 | |         if dot_qperp_d1.abs() != ZERO {
...  |
66 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
56 ~     }
57 +     // The lines are parallel.
58 +     let dot_qperp_d1 = q.perp(line1.dir);
59 +     if dot_qperp_d1.abs() != ZERO {
60 +         // The lines are parallel but distinct.
61 +         return LineLineConfig::ParallelDistinct();
62 +     } else {
63 +         // The lines are the same.
64 +         return LineLineConfig::ParallelTheSame();
65 +     }
   |

warning: redundant else block
  --> src/intersection/int_line_line.rs:62:10
   |
62 |           } else {
   |  __________^
63 | |             // The lines are the same.
64 | |             return LineLineConfig::ParallelTheSame();
65 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
62 ~         }
63 +         // The lines are the same.
64 +         return LineLineConfig::ParallelTheSame();
   |

warning: redundant else block
  --> src/intersection/int_segment_arc.rs:54:14
   |
54 |               } else {
   |  ______________^
55 | |                 return SegmentArcConfig::NoIntersection();
56 | |             }
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
54 ~             }
55 +             return SegmentArcConfig::NoIntersection();
   |

warning: redundant else block
  --> src/intersection/int_segment_arc.rs:51:18
   |
51 |                   } else {
   |  __________________^
52 | |                     return SegmentArcConfig::OnePoint(p0, t0);
53 | |                 }
   | |_________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
51 ~                 }
52 +                 return SegmentArcConfig::OnePoint(p0, t0);
   |

warning: redundant else block
  --> src/intersection/int_segment_arc.rs:64:18
   |
64 |                   } else {
   |  __________________^
65 | |                     return SegmentArcConfig::TwoPoints(p0, p1, t0, t1);
66 | |                 }
   | |_________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
64 ~                 }
65 +                 return SegmentArcConfig::TwoPoints(p0, p1, t0, t1);
   |

warning: redundant else block
  --> src/intersection/int_segment_arc.rs:71:18
   |
71 |                   } else {
   |  __________________^
72 | |                     return SegmentArcConfig::OnePoint(p0, t0);
73 | |                 }
   | |_________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
71 ~                 }
72 +                 return SegmentArcConfig::OnePoint(p0, t0);
   |

warning: redundant else block
  --> src/intersection/int_segment_arc.rs:78:18
   |
78 |                   } else {
   |  __________________^
79 | |                     return SegmentArcConfig::OnePoint(p1, t1);
80 | |                 }
   | |_________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
78 ~                 }
79 +                 return SegmentArcConfig::OnePoint(p1, t1);
   |

warning: redundant else block
  --> src/intersection/int_segment_circle.rs:46:14
   |
46 |               } else {
   |  ______________^
47 | |                 return SegmentCircleConfig::NoIntersection();
48 | |             }
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
46 ~             }
47 +             return SegmentCircleConfig::NoIntersection();
   |

warning: redundant else block
  --> src/intersection/int_segment_segment.rs:60:10
   |
60 |           } else {
   |  __________^
61 | |             return SegmentSegmentConfig::NoIntersection();
62 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
60 ~         }
61 +         return SegmentSegmentConfig::NoIntersection();
   |

warning: redundant else block
  --> src/intersection/int_segment_segment.rs:88:10
   |
88 |           } else {
   |  __________^
89 | |             return SegmentSegmentConfig::NoIntersection();
90 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
88 ~         }
89 +         return SegmentSegmentConfig::NoIntersection();
   |

warning: redundant else block
  --> src/intersection/int_segment_segment.rs:85:14
   |
85 |               } else {
   |  ______________^
86 | |                 return SegmentSegmentConfig::NoIntersection();
87 | |             }
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
85 ~             }
86 +             return SegmentSegmentConfig::NoIntersection();
   |

warning: redundant else block
   --> src/intersection/int_segment_segment.rs:116:10
    |
116 |           } else {
    |  __________^
117 | |             return SegmentSegmentConfig::NoIntersection();
118 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
116 ~         }
117 +         return SegmentSegmentConfig::NoIntersection();
    |

warning: redundant else block
   --> src/intersection/int_segment_segment.rs:113:14
    |
113 |               } else {
    |  ______________^
114 | |                 return SegmentSegmentConfig::NoIntersection();
115 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
113 ~             }
114 +             return SegmentSegmentConfig::NoIntersection();
    |

warning: redundant else block
   --> src/intersection/int_segment_segment.rs:138:14
    |
138 |               } else {
    |  ______________^
139 | |                 return SegmentSegmentConfig::NoIntersection();
140 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
138 ~             }
139 +             return SegmentSegmentConfig::NoIntersection();
    |

warning: redundant else block
   --> src/intersection/int_segment_segment.rs:135:18
    |
135 |                   } else {
    |  __________________^
136 | |                     return SegmentSegmentConfig::OnePoint(p, s0, s1);
137 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
135 ~                 }
136 +                 return SegmentSegmentConfig::OnePoint(p, s0, s1);
    |

warning: redundant else block
   --> src/intersection/int_segment_segment.rs:163:22
    |
163 |                       } else {
    |  ______________________^
164 | |                         return SegmentSegmentConfig::TwoPoints(p0, p1, p2, p3);
165 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
    |
163 ~                     }
164 +                     return SegmentSegmentConfig::TwoPoints(p0, p1, p2, p3);
    |

warning: unnecessary hashes around raw string literal
   --> src/svg.rs:106:22
    |
106 |         let footer = r#"</svg>"#.to_owned();
    |                      ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_raw_string_hashes
    = note: `-W clippy::needless-raw-string-hashes` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::needless_raw_string_hashes)]`
help: remove all the hashes around the string literal
    |
106 -         let footer = r#"</svg>"#.to_owned();
106 +         let footer = r"</svg>".to_owned();
    |

warning: item in documentation is missing backticks
   --> src/lib.rs:137:32
    |
137 | //! ## Working with polylines (PVertex)
    |                                ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
    = note: `-W clippy::doc-markdown` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::doc_markdown)]`
help: try
    |
137 - //! ## Working with polylines (PVertex)
137 + //! ## Working with polylines (`PVertex`)
    |

warning: item in documentation is missing backticks
  --> src/arc.rs:25:32
   |
25 | /// * `r` - Radius of the arc (f64::INFINITY indicates a line segment)
   |                                ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
25 - /// * `r` - Radius of the arc (f64::INFINITY indicates a line segment)
25 + /// * `r` - Radius of the arc (`f64::INFINITY` indicates a line segment)
   |

warning: item in documentation is missing backticks
  --> src/arc.rs:79:40
   |
79 |     /// * `r` - Radius of the arc (use linearc() for segments)
   |                                        ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
79 -     /// * `r` - Radius of the arc (use linearc() for segments)
79 +     /// * `r` - Radius of the arc (use `linearc()` for segments)
   |

warning: this method could have a `#[must_use]` attribute
   --> src/arc.rs:137:5
    |
137 |     pub fn is_arc(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_arc(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
    = note: `-W clippy::must-use-candidate` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::must_use_candidate)]`

warning: this method could have a `#[must_use]` attribute
   --> src/arc.rs:158:5
    |
158 |     pub fn is_line(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_line(&self) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src/arc.rs:205:5
    |
205 |     pub fn reverse(&self) -> Arc {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn reverse(&self) -> Arc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src/arc.rs:205:5
    |
205 | /     pub fn reverse(&self) -> Arc {
206 | |         Arc::new(self.b, self.a, self.c, self.r)
207 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use
    = note: `-W clippy::return-self-not-must-use` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::return_self_not_must_use)]`

warning: this method could have a `#[must_use]` attribute
   --> src/arc.rs:229:5
    |
229 |     pub fn contains(&self, p: Point) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn contains(&self, p: Point) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/arc.rs:274:1
    |
274 | pub fn arc(a: Point, b: Point, c: Point, r: f64) -> Arc {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc(a: Point, b: Point, c: Point, r: f64) -> Arc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/arc.rs:303:1
    |
303 | pub fn arcseg(a: Point, b: Point) -> Arc {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arcseg(a: Point, b: Point) -> Arc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/arc.rs:545:1
    |
545 | pub fn arc_is_collapsed_radius(r: f64, eps: f64) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_is_collapsed_radius(r: f64, eps: f64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/arc.rs:579:1
    |
579 | pub fn arc_is_collapsed_ends(a: Point, b: Point, eps: f64) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_is_collapsed_ends(a: Point, b: Point, eps: f64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/arc.rs:628:1
    |
628 | pub fn arc_is_not_consistent(arc: &Arc, eps: f64) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_is_not_consistent(arc: &Arc, eps: f64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/arc.rs:666:1
    |
666 | pub fn arc_check(seg: &Arc, eps: f64) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_check(seg: &Arc, eps: f64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this `if` statement can be collapsed
   --> src/arc.rs:667:5
    |
667 | /     if seg.is_line() {
668 | |         if arc_is_collapsed_ends(seg.a, seg.b, eps) {
669 | |             return false;
670 | |         }
671 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
    = note: `#[warn(clippy::collapsible_if)]` on by default
help: collapse nested if block
    |
667 ~     if seg.is_line()
668 ~         && arc_is_collapsed_ends(seg.a, seg.b, eps) {
669 |             return false;
670 ~         }
    |

warning: this `if` statement can be collapsed
   --> src/arc.rs:672:5
    |
672 | /     if seg.is_arc() {
673 | |         if arc_is_collapsed_ends(seg.a, seg.b, eps)
674 | |             || arc_is_collapsed_radius(seg.r, eps)
675 | |             || arc_is_not_consistent(seg, eps)
...   |
679 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
672 ~     if seg.is_arc()
673 ~         && (arc_is_collapsed_ends(seg.a, seg.b, eps)
674 |             || arc_is_collapsed_radius(seg.r, eps)
675 ~             || arc_is_not_consistent(seg, eps))
676 |         {
677 |             return false;
678 ~         }
    |

warning: item in documentation is missing backticks
   --> src/arc.rs:940:25
    |
940 | /// Much faster, avoids arctan()
    |                         ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
940 - /// Much faster, avoids arctan()
940 + /// Much faster, avoids `arctan()`
    |

warning: this function could have a `#[must_use]` attribute
   --> src/arc.rs:973:1
    |
973 | pub fn arc_circle_parametrization(pp1: Point, pp2: Point, bulge: f64) -> Arc {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_circle_parametrization(pp1: Point, pp2: Point, bulge: f64) -> Arc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
    --> src/arc.rs:1286:1
     |
1286 | pub fn arc_bulge_from_points(a: Point, b: Point, c: Point, r: f64) -> f64 {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_bulge_from_points(a: Point, b: Point, c: Point, r: f64) -> f64`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
    --> src/arc.rs:1323:5
     |
1323 |     return dist / (2.0 * seg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
     = note: `#[warn(clippy::needless_return)]` on by default
help: remove `return`
     |
1323 -     return dist / (2.0 * seg);
1323 +     dist / (2.0 * seg)
     |

warning: this method could have a `#[must_use]` attribute
  --> src/circle.rs:46:5
   |
46 |     pub fn new(c: Point, r: f64) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(c: Point, r: f64) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/circle.rs:68:1
   |
68 | pub fn circle(c: Point, r: f64) -> Circle {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn circle(c: Point, r: f64) -> Circle`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src/line.rs:32:5
   |
32 |     pub fn new(origin: Point, dir: Point) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(origin: Point, dir: Point) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src/line.rs:47:5
   |
47 |     pub fn unitdir(&self) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn unitdir(&self) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> src/line.rs:47:5
   |
47 | /     pub fn unitdir(&self) -> Self {
48 | |         let (dir, _) = self.dir.normalize(false);
49 | |         Line {
50 | |             origin: self.origin,
...  |
53 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this function could have a `#[must_use]` attribute
  --> src/line.rs:60:1
   |
60 | pub fn line(origin: Point, dir: Point) -> Line {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn line(origin: Point, dir: Point) -> Line`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src/point.rs:55:5
   |
55 |     pub fn new(x: f64, y: f64) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(x: f64, y: f64) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/point.rs:79:1
   |
79 | pub fn point(x: f64, y: f64) -> Point {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn point(x: f64, y: f64) -> Point`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/point.rs:123:1
    |
123 | pub fn points_order(a: Point, b: Point, p: Point) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn points_order(a: Point, b: Point, p: Point) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:237:5
    |
237 |     pub fn dot(&self, other: Self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dot(&self, other: Self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:266:5
    |
266 |     pub fn perp(&self, other: Self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn perp(&self, other: Self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:285:5
    |
285 |     pub fn norm(&self) -> f64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn norm(&self) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:310:5
    |
310 |     pub fn normalize(&self, robust: bool) -> (Point, f64) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn normalize(&self, robust: bool) -> (Point, f64)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: manual implementation of an assign operation
   --> src/point.rs:323:17
    |
323 |                 norm = norm * max_abs_comp;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `norm *= max_abs_comp`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern
    = note: `#[warn(clippy::assign_op_pattern)]` on by default

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:363:5
    |
363 |     pub fn almost_eq(&self, other: Self, ulp: i64) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn almost_eq(&self, other: Self, ulp: i64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:388:5
    |
388 |     pub fn close_enough(&self, other: Self, eps: f64) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn close_enough(&self, other: Self, eps: f64) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
   --> src/point.rs:389:9
    |
389 |         return (self.x - other.x).abs() <= eps && (self.y - other.y).abs() <= eps;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
389 -         return (self.x - other.x).abs() <= eps && (self.y - other.y).abs() <= eps;
389 +         (self.x - other.x).abs() <= eps && (self.y - other.y).abs() <= eps
    |

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:412:5
    |
412 |     pub fn lerp(self, other: Point, t: f64) -> Point {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn lerp(self, other: Point, t: f64) -> Point`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> src/point.rs:412:5
    |
412 | /     pub fn lerp(self, other: Point, t: f64) -> Point {
413 | |         self + (other - self) * t
414 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this method could have a `#[must_use]` attribute
   --> src/point.rs:423:5
    |
423 | /     pub fn sort_colinear_points(
424 | |         a: Point,
425 | |         b: Point,
426 | |         c: Point,
427 | |         d: Point,
428 | |     ) -> (Point, Point, Point, Point) {
    | |_____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
    |
423 |     #[must_use] pub fn sort_colinear_points(
    |     +++++++++++

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/point.rs:447:13
    |
447 |             tt = (tt.0, tt.3, tt.2, tt.1)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `tt = (tt.0, tt.3, tt.2, tt.1);`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
    = note: `-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::semicolon_if_nothing_returned)]`

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/point.rs:450:13
    |
450 |             tt = (tt.2, tt.1, tt.0, tt.3)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `tt = (tt.2, tt.1, tt.0, tt.3);`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/point.rs:453:13
    |
453 |             tt = (tt.1, tt.0, tt.2, tt.3)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `tt = (tt.1, tt.0, tt.2, tt.3);`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/point.rs:456:13
    |
456 |             tt = (tt.0, tt.1, tt.3, tt.2)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `tt = (tt.0, tt.1, tt.3, tt.2);`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned

warning: consider adding a `;` to the last statement for consistent formatting
   --> src/point.rs:459:13
    |
459 |             tt = (tt.0, tt.2, tt.1, tt.3)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `tt = (tt.0, tt.2, tt.1, tt.3);`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned

warning: this method could have a `#[must_use]` attribute
  --> src/polyline.rs:70:5
   |
70 |     pub fn new(p: Point, b: f64) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(p: Point, b: f64) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/polyline.rs:92:1
   |
92 | pub fn pvertex(p: Point, b: f64) -> PVertex {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn pvertex(p: Point, b: f64) -> PVertex`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: docs for function which may panic missing `# Panics` section
   --> src/polyline.rs:128:1
    |
128 | pub fn polyline_reverse(poly: &Polyline) -> Polyline {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/polyline.rs:129:16
    |
129 |     let last = poly.last().unwrap();
    |                ^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
    = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`

warning: this function could have a `#[must_use]` attribute
   --> src/polyline.rs:128:1
    |
128 | pub fn polyline_reverse(poly: &Polyline) -> Polyline {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn polyline_reverse(poly: &Polyline) -> Polyline`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/polyline.rs:154:1
    |
154 | pub fn polylines_reverse(poly: &Vec<Polyline>) -> Vec<Polyline> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn polylines_reverse(poly: &Vec<Polyline>) -> Vec<Polyline>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> src/polyline.rs:154:32
    |
154 | pub fn polylines_reverse(poly: &Vec<Polyline>) -> Vec<Polyline> {
    |                                ^^^^^^^^^^^^^^ help: change this to: `&[Polyline]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg
    = note: `#[warn(clippy::ptr_arg)]` on by default

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> src/polyline.rs:156:14
    |
156 |     for p in poly.iter() {
    |              ^^^^^^^^^^^ help: to write this more concisely, try: `poly`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop
    = note: `-W clippy::explicit-iter-loop` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::explicit_iter_loop)]`

warning: this function could have a `#[must_use]` attribute
   --> src/polyline.rs:188:1
    |
188 | pub fn polyline_scale(poly: &Polyline, scale: f64) -> Polyline {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn polyline_scale(poly: &Polyline, scale: f64) -> Polyline`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> src/polyline.rs:190:14
    |
190 |     for e in poly.iter() {
    |              ^^^^^^^^^^^ help: to write this more concisely, try: `poly`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: this function could have a `#[must_use]` attribute
   --> src/polyline.rs:222:1
    |
222 | pub fn polyline_translate(poly: &Polyline, translate: Point) -> Polyline {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn polyline_translate(poly: &Polyline, translate: Point) -> Polyline`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> src/polyline.rs:224:14
    |
224 |     for e in poly.iter() {
    |              ^^^^^^^^^^^ help: to write this more concisely, try: `poly`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: this method could have a `#[must_use]` attribute
  --> src/rect.rs:38:5
   |
38 |     pub fn new(p1: Point, p2: Point) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(p1: Point, p2: Point) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/rect.rs:60:1
   |
60 | pub fn rect(p1: Point, p2: Point) -> Rect {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn rect(p1: Point, p2: Point) -> Rect`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src/segment.rs:46:5
   |
46 |     pub fn new(a: Point, b: Point) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(a: Point, b: Point) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/segment.rs:68:1
   |
68 | pub fn segment(p0: Point, p1: Point) -> Segment {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn segment(p0: Point, p1: Point) -> Segment`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src/segment.rs:94:5
   |
94 |     pub fn get_centered_form(&self) -> (Point, Point, f64) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_centered_form(&self) -> (Point, Point, f64)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/algo/area.rs:36:1
   |
36 | pub fn pointline_area(points: &Pointline) -> f64 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn pointline_area(points: &Pointline) -> f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
   --> src/algo/area.rs:103:1
    |
103 | pub fn arcline_area(arcs: &Arcline) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arcline_area(arcs: &Arcline) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: item in documentation is missing backticks
  --> src/algo/bounding.rs:27:26
   |
27 | /// arc's angular range [start_angle, end_angle] in CCW direction.
   |                          ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
27 - /// arc's angular range [start_angle, end_angle] in CCW direction.
27 + /// arc's angular range [`start_angle`, end_angle] in CCW direction.
   |

warning: item in documentation is missing backticks
  --> src/algo/bounding.rs:27:39
   |
27 | /// arc's angular range [start_angle, end_angle] in CCW direction.
   |                                       ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
27 - /// arc's angular range [start_angle, end_angle] in CCW direction.
27 + /// arc's angular range [start_angle, `end_angle`] in CCW direction.
   |

warning: this function could have a `#[must_use]` attribute
  --> src/algo/bounding.rs:59:1
   |
59 | pub fn arc_bounding_circle(arc: &Arc) -> Circle {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_bounding_circle(arc: &Arc) -> Circle`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this `if` statement can be collapsed
   --> src/algo/bounding.rs:198:13
    |
198 | /             if let Some(candidate) = circumcircle(p, points[i], points[j]) {
199 | |                 if circle_contains_all_points(&candidate, points)
200 | |                     && (best_circle.r == 0.0 || candidate.r < best_circle.r)
...   |
204 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
198 ~             if let Some(candidate) = circumcircle(p, points[i], points[j])
199 ~                 && circle_contains_all_points(&candidate, points)
200 |                     && (best_circle.r == 0.0 || candidate.r < best_circle.r)
201 |                 {
202 |                     best_circle = candidate;
203 ~                 }
    |

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> src/algo/bounding.rs:228:15
    |
228 |             / circle_points.len() as f64;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss
    = note: `-W clippy::cast-precision-loss` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_precision_loss)]`

warning: this function could have a `#[must_use]` attribute
   --> src/algo/bounding.rs:877:1
    |
877 | pub fn arc_bounding_rect(arc: &Arc) -> Rect {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arc_bounding_rect(arc: &Arc) -> Rect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/algo/convex_hull.rs:59:1
   |
59 | pub fn pointline_convex_hull(points: &Pointline) -> Pointline {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn pointline_convex_hull(points: &Pointline) -> Pointline`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: called `map(<f>).unwrap_or(<a>)` on an `Option` value
  --> src/algo/convex_hull.rs:76:17
   |
76 |       let start = unique_points
   |  _________________^
77 | |         .iter()
78 | |         .enumerate()
79 | |         .min_by(|(_, a), (_, b)| match a.x.partial_cmp(&b.x).unwrap() {
...  |
83 | |         .map(|(idx, _)| idx)
84 | |         .unwrap_or(0);
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or
   = note: `-W clippy::map-unwrap-or` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::map_unwrap_or)]`
help: use `map_or(<a>, <f>)` instead
   |
83 -         .map(|(idx, _)| idx)
83 +         .map_or(0, |(idx, _)| idx);
   |

warning: this function could have a `#[must_use]` attribute
   --> src/algo/convex_hull.rs:642:1
    |
642 | pub fn arcline_convex_hull(_arcs: &Arcline) -> Arcline {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arcline_convex_hull(_arcs: &Arcline) -> Arcline`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: returning the result of a `let` binding from a block
   --> src/algo/convex_hull.rs:645:5
    |
643 |     let res = Arcline::new();
    |     ------------------------- unnecessary `let` binding
644 |
645 |     res
    |     ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
    = note: `#[warn(clippy::let_and_return)]` on by default
help: return the expression directly
    |
643 ~     
644 |
645 ~     Arcline::new()
    |

warning: this function could have a `#[must_use]` attribute
  --> src/algo/mod.rs:33:1
   |
33 | pub fn is_convex_pointline(points: &Pointline) -> bool {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_convex_pointline(points: &Pointline) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src/interval.rs:16:5
   |
16 |     pub fn new(e0: f64, e1: f64) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(e0: f64, e1: f64) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/interval.rs:23:1
   |
23 | pub fn interval(e0: f64, e1: f64) -> Interval {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn interval(e0: f64, e1: f64) -> Interval`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
  --> src/interval.rs:49:5
   |
49 |     pub fn contains(&self, e: f64) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn contains(&self, e: f64) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this if-then-else expression returns a bool literal
  --> src/interval.rs:51:9
   |
51 | /         if e >= self.0 && e <= self.1 {
52 | |             true
53 | |         } else {
54 | |             false
55 | |         }
   | |_________^ help: you can reduce it to: `e >= self.0 && e <= self.1`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool
   = note: `#[warn(clippy::needless_bool)]` on by default

warning: casting integer literal to `u64` is unnecessary
 --> src/utils.rs:3:29
  |
3 | const ALMOST_EQUAL_C: u64 = 0x8000_0000_0000_0000 as u64;
  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `0x8000_0000_0000_0000_u64`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast
  = note: `#[warn(clippy::unnecessary_cast)]` on by default

warning: casting `u64` to `i64` may wrap around the value
 --> src/utils.rs:4:30
  |
4 | const ALMOST_EQUAL_CI: i64 = ALMOST_EQUAL_C as i64;
  |                              ^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
  = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
  = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_wrap)]`

warning: this function could have a `#[must_use]` attribute
  --> src/utils.rs:49:1
   |
49 | pub fn almost_equal_as_int(a: f64, b: f64, ulps: i64) -> bool {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn almost_equal_as_int(a: f64, b: f64, ulps: i64) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/utils.rs:68:5
   |
68 |     return false;
   |     ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
68 -     return false;
68 +     false
   |

warning: strict comparison of `f32` or `f64`
  --> src/utils.rs:53:16
   |
53 |         return a == b;
   |                ^^^^^^ help: consider comparing them within some margin of error: `(a - b).abs() < error_margin`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp
   = note: `-W clippy::float-cmp` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::float_cmp)]`

warning: casting `u64` to `i64` may wrap around the value
  --> src/utils.rs:55:24
   |
55 |     let mut a_i: i64 = a.to_bits() as i64;
   |                        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
  --> src/utils.rs:56:24
   |
56 |     let mut b_i: i64 = b.to_bits() as i64;
   |                        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: this function could have a `#[must_use]` attribute
  --> src/utils.rs:94:1
   |
94 | pub fn close_enough(a: f64, b: f64, eps: f64) -> bool {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn close_enough(a: f64, b: f64, eps: f64) -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/utils.rs:95:5
   |
95 |     return (a - b).abs() <= eps;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
95 -     return (a - b).abs() <= eps;
95 +     (a - b).abs() <= eps
   |

warning: this function could have a `#[must_use]` attribute
   --> src/utils.rs:116:1
    |
116 | pub fn perturbed_ulps_as_int(f: f64, c: i64) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn perturbed_ulps_as_int(f: f64, c: i64) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casting `u64` to `i64` may wrap around the value
   --> src/utils.rs:121:24
    |
121 |     let mut f_i: i64 = f.to_bits() as i64;
    |                        ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/utils.rs:123:20
    |
123 |     f64::from_bits(f_i as u64)
    |                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_sign_loss)]`

warning: this function could have a `#[must_use]` attribute
   --> src/utils.rs:351:1
    |
351 | pub fn diff_of_prod(a: f64, b: f64, c: f64, d: f64) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn diff_of_prod(a: f64, b: f64, c: f64, d: f64) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
   --> src/utils.rs:355:5
    |
355 |     return dop + err;
    |     ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
355 -     return dop + err;
355 +     dop + err
    |

warning: this function could have a `#[must_use]` attribute
   --> src/utils.rs:388:1
    |
388 | pub fn sum_of_prod(a: f64, b: f64, c: f64, d: f64) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn sum_of_prod(a: f64, b: f64, c: f64, d: f64) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
   --> src/utils.rs:392:5
    |
392 |     return sop + err;
    |     ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
392 -     return sop + err;
392 +     sop + err
    |

warning: this function could have a `#[must_use]` attribute
   --> src/utils.rs:396:1
    |
396 | pub fn min_5(a: f64, b: f64, c: f64, d: f64, e: f64) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn min_5(a: f64, b: f64, c: f64, d: f64, e: f64) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
   --> src/utils.rs:397:5
    |
397 |     return a.min(b).min(c).min(d).min(e);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
397 -     return a.min(b).min(c).min(d).min(e);
397 +     a.min(b).min(c).min(d).min(e)
    |

warning: this function could have a `#[must_use]` attribute
   --> src/utils.rs:401:1
    |
401 | pub fn min_4(a: f64, b: f64, c: f64, d: f64) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn min_4(a: f64, b: f64, c: f64, d: f64) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
   --> src/utils.rs:402:5
    |
402 |     return a.min(b).min(c).min(d);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
402 -     return a.min(b).min(c).min(d);
402 +     a.min(b).min(c).min(d)
    |

warning: this function could have a `#[must_use]` attribute
   --> src/utils.rs:406:1
    |
406 | pub fn min_3(a: f64, b: f64, c: f64) -> f64 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn min_3(a: f64, b: f64, c: f64) -> f64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
   --> src/utils.rs:407:5
    |
407 |     return a.min(b).min(c);
    |     ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
407 -     return a.min(b).min(c);
407 +     a.min(b).min(c)
    |

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_arc_arc.rs:33:1
   |
33 | pub fn dist_arc_arc(arc0: &Arc, arc1: &Arc) -> f64 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_arc_arc(arc0: &Arc, arc1: &Arc) -> f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_line_circle.rs:39:1
   |
39 | pub fn dist_line_circle(line: &Line, circle: &Circle) -> DistLineCircleConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_line_circle(line: &Line, circle: &Circle) -> DistLineCircleConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> src/distance/dist_line_circle.rs:47:5
   |
47 |     const ZERO: f64 = 0.0;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements
   = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::items_after_statements)]`

warning: the loop variable `j` is only used to index `closest`
   --> src/distance/dist_line_circle.rs:104:14
    |
104 |     for j in 0..num_closest_pairs {
    |              ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop
    = note: `#[warn(clippy::needless_range_loop)]` on by default
help: consider using an iterator
    |
104 -     for j in 0..num_closest_pairs {
104 +     for <item> in closest.iter_mut().take(num_closest_pairs) {
    |

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_point_arc.rs:39:1
   |
39 | pub fn dist_point_arc(p: &Point, arc: &Arc) -> DistPointArcConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_point_arc(p: &Point, arc: &Arc) -> DistPointArcConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unnecessary boolean `not` operation
  --> src/distance/dist_point_arc.rs:42:5
   |
42 | /     if !equidistant {
...  |
61 | |         DistPointArcConfig::Equidistant(arc.r, arc.a)
62 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
   = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::if_not_else)]`
help: try
   |
42 ~     if equidistant {
43 +         // The point is the center of the circle containing the arc.
44 +         DistPointArcConfig::Equidistant(arc.r, arc.a)
45 +     } else {
46 +         // Test whether the closest circle point is on the arc. If it
47 +         // is, that point is the closest arc point. If it is not, the
48 +         // closest arc point is an arc endpoint. Determine which
49 +         // endpoint that is.
50 +         if arc.contains(closest) {
51 +             // TODO: use arc.contains_point that is not result of intersection
52 +             DistPointArcConfig::OnePoint(dist, closest)
53 +         } else {
54 +             let length0 = (arc.a - p).norm();
55 +             let length1 = (arc.b - p).norm();
56 +             if length0 <= length1 {
57 +                 DistPointArcConfig::OnePoint(length0, arc.a)
58 +             } else {
59 +                 DistPointArcConfig::OnePoint(length1, arc.b)
60 +             }
61 +         }
62 +     }
   |

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_point_arc.rs:66:1
   |
66 | pub fn dist_point_arc_dist(p: &Point, arc: &Arc) -> f64 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_point_arc_dist(p: &Point, arc: &Arc) -> f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: these match arms have identical bodies
  --> src/distance/dist_point_arc.rs:68:9
   |
68 |         DistPointArcConfig::OnePoint(dist, _) => dist,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |         DistPointArcConfig::Equidistant(dist, _) => dist,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
   = note: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::match_same_arms)]`
help: otherwise merge the patterns into a single arm
   |
68 -         DistPointArcConfig::OnePoint(dist, _) => dist,
69 -         DistPointArcConfig::Equidistant(dist, _) => dist,
68 +         DistPointArcConfig::OnePoint(dist, _) | DistPointArcConfig::Equidistant(dist, _) => dist,
   |

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_point_circle.rs:39:1
   |
39 | pub fn dist_point_circle(p: &Point, circle: &Circle) -> (f64, Point, bool) {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_point_circle(p: &Point, circle: &Circle) -> (f64, Point, bool)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_point_segment.rs:39:1
   |
39 | pub fn dist_point_segment(point: &Point, segment: &Segment) -> (f64, Point) {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_point_segment(point: &Point, segment: &Segment) -> (f64, Point)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> src/distance/dist_point_segment.rs:44:5
   |
44 |     const ZERO: f64 = 0f64;
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> src/distance/dist_point_segment.rs:45:5
   |
45 |     const ONE: f64 = 1f64;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: manual implementation of an assign operation
  --> src/distance/dist_point_segment.rs:59:17
   |
59 |                 t = t / sqr_length;
   |                 ^^^^^^^^^^^^^^^^^^ help: replace it with: `t /= sqr_length`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_segment_arc.rs:35:1
   |
35 | pub fn dist_segment_arc(seg: &Segment, arc: &Arc) -> f64 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_segment_arc(seg: &Segment, arc: &Arc) -> f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/distance/dist_segment_arc.rs:57:13
   |
57 |             return f64::min(dist, dist4);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
57 -             return f64::min(dist, dist4);
57 +             f64::min(dist, dist4)
   |

warning: unneeded `return` statement
  --> src/distance/dist_segment_arc.rs:61:13
   |
61 |             return 0.0;
   |             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
61 -             return 0.0;
61 +             0.0
   |

warning: wildcard matches only a single variant and will also match any future added variants
  --> src/distance/dist_segment_arc.rs:55:17
   |
55 |                 _ => f64::MAX,
   |                 ^ help: try: `DistLineCircleConfig::TwoPairs(..)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants
   = note: `-W clippy::match-wildcard-for-single-variants` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::match_wildcard_for_single_variants)]`

warning: manual `RangeInclusive::contains` implementation
  --> src/distance/dist_segment_arc.rs:49:24
   |
49 |                     if param >= 0.0 && param <= 1.0 && arc.contains(closest1) {
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0.0..=1.0).contains(&param)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains
   = note: `#[warn(clippy::manual_range_contains)]` on by default

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_segment_circle.rs:44:1
   |
44 | pub fn dist_segment_circle(seg: &Segment, circle: &Circle) -> DistSegmentCircleConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_segment_circle(seg: &Segment, circle: &Circle) -> DistSegmentCircleConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/distance/dist_segment_circle.rs:65:17
   |
65 |                 return DistSegmentCircleConfig::OnePoint(ZERO, closest01);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
65 -                 return DistSegmentCircleConfig::OnePoint(ZERO, closest01);
65 +                 DistSegmentCircleConfig::OnePoint(ZERO, closest01)
   |

warning: unneeded `return` statement
  --> src/distance/dist_segment_circle.rs:69:17
   |
69 |                 return DistSegmentCircleConfig::TwoPoints(ZERO, closest01, closest11);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
69 -                 return DistSegmentCircleConfig::TwoPoints(ZERO, closest01, closest11);
69 +                 DistSegmentCircleConfig::TwoPoints(ZERO, closest01, closest11)
   |

warning: unneeded `return` statement
  --> src/distance/dist_segment_circle.rs:74:17
   |
74 |                 return DistSegmentCircleConfig::OnePoint(dist, p0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
74 -                 return DistSegmentCircleConfig::OnePoint(dist, p0);
74 +                 DistSegmentCircleConfig::OnePoint(dist, p0)
   |

warning: unneeded `return` statement
  --> src/distance/dist_segment_circle.rs:78:17
   |
78 |                 return DistSegmentCircleConfig::OnePoint(ZERO, closest11);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
78 -                 return DistSegmentCircleConfig::OnePoint(ZERO, closest11);
78 +                 DistSegmentCircleConfig::OnePoint(ZERO, closest11)
   |

warning: this expression creates a reference which is immediately dereferenced by the compiler
  --> src/distance/dist_segment_circle.rs:47:39
   |
47 |     let dlc = dist_line_circle(&line, &circle);
   |                                       ^^^^^^^ help: change this to: `circle`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow
   = note: `#[warn(clippy::needless_borrow)]` on by default

warning: manual `RangeInclusive::contains` implementation
  --> src/distance/dist_segment_circle.rs:64:16
   |
64 |             if param0 >= ZERO && param0 <= ONE && param1 > ONE {
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(ZERO..=ONE).contains(&param0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: manual `RangeInclusive::contains` implementation
  --> src/distance/dist_segment_circle.rs:68:51
   |
68 |             if param0 >= ZERO && param0 <= ONE && param1 >= ZERO && param1 <= ONE {
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(ZERO..=ONE).contains(&param1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: manual `RangeInclusive::contains` implementation
  --> src/distance/dist_segment_circle.rs:68:16
   |
68 |             if param0 >= ZERO && param0 <= ONE && param1 >= ZERO && param1 <= ONE {
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(ZERO..=ONE).contains(&param0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: manual `RangeInclusive::contains` implementation
  --> src/distance/dist_segment_circle.rs:77:33
   |
77 |             if param0 < ZERO && param1 >= ZERO && param1 <= ONE {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(ZERO..=ONE).contains(&param1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: this expression creates a reference which is immediately dereferenced by the compiler
  --> src/distance/dist_segment_circle.rs:90:68
   |
90 |                 let (dist, closest, _) = dist_point_circle(&seg.a, &circle);
   |                                                                    ^^^^^^^ help: change this to: `circle`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
  --> src/distance/dist_segment_circle.rs:94:70
   |
94 |                 let (dist0, closest0, _) = dist_point_circle(&seg.a, &circle);
   |                                                                      ^^^^^^^ help: change this to: `circle`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
  --> src/distance/dist_segment_circle.rs:95:70
   |
95 |                 let (dist1, closest1, _) = dist_point_circle(&seg.b, &circle);
   |                                                                      ^^^^^^^ help: change this to: `circle`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/distance/dist_segment_circle.rs:110:52
    |
110 |     let (dist0, p0, _) = dist_point_circle(&seg.a, &circle);
    |                                                    ^^^^^^^ help: change this to: `circle`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/distance/dist_segment_circle.rs:111:52
    |
111 |     let (dist1, p1, _) = dist_point_circle(&seg.b, &circle);
    |                                                    ^^^^^^^ help: change this to: `circle`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this function could have a `#[must_use]` attribute
  --> src/distance/dist_segment_segment.rs:43:1
   |
43 | pub fn dist_segment_segment(seg0: &Segment, seg1: &Segment) -> f64 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dist_segment_segment(seg0: &Segment, seg1: &Segment) -> f64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_arc_arc.rs:65:1
   |
65 | pub fn int_arc_arc(arc0: &Arc, arc1: &Arc) -> ArcArcConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_arc_arc(arc0: &Arc, arc1: &Arc) -> ArcArcConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function has too many lines (104/100)
   --> src/intersection/int_arc_arc.rs:65:1
    |
65  | / pub fn int_arc_arc(arc0: &Arc, arc1: &Arc) -> ArcArcConfig {
66  | |     const EPS_CONTAINS: f64 = 1E-10;
67  | |     let circle0 = circle(arc0.c, arc0.r);
68  | |     let circle1 = circle(arc1.c, arc1.r);
...   |
203 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`

warning: unneeded `return` statement
  --> src/intersection/int_arc_arc.rs:72:49
   |
72 |         CircleCircleConfig::NoIntersection() => return ArcArcConfig::NoIntersection(),
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
72 -         CircleCircleConfig::NoIntersection() => return ArcArcConfig::NoIntersection(),
72 +         CircleCircleConfig::NoIntersection() => ArcArcConfig::NoIntersection(),
   |

warning: unneeded `return` statement
   --> src/intersection/int_arc_arc.rs:157:17
    |
157 |                 return ArcArcConfig::CocircularOneArc4(*arc1);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
157 -                 return ArcArcConfig::CocircularOneArc4(*arc1);
157 +                 ArcArcConfig::CocircularOneArc4(*arc1)
    |

warning: unneeded `return` statement
   --> src/intersection/int_arc_arc.rs:160:17
    |
160 |                 return ArcArcConfig::NoIntersection();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
160 -                 return ArcArcConfig::NoIntersection();
160 +                 ArcArcConfig::NoIntersection()
    |

warning: unneeded `return` statement
   --> src/intersection/int_arc_arc.rs:168:21
    |
168 |                     return ArcArcConfig::NonCocircularOnePointTouching(point0);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
168 -                     return ArcArcConfig::NonCocircularOnePointTouching(point0);
168 +                     ArcArcConfig::NonCocircularOnePointTouching(point0)
    |

warning: unneeded `return` statement
   --> src/intersection/int_arc_arc.rs:171:21
    |
171 |                     return ArcArcConfig::NonCocircularOnePoint(point0);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
171 -                     return ArcArcConfig::NonCocircularOnePoint(point0);
171 +                     ArcArcConfig::NonCocircularOnePoint(point0)
    |

warning: unneeded `return` statement
   --> src/intersection/int_arc_arc.rs:174:17
    |
174 |                 return ArcArcConfig::NoIntersection();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
174 -                 return ArcArcConfig::NoIntersection();
174 +                 ArcArcConfig::NoIntersection()
    |

warning: unneeded `return` statement
   --> src/intersection/int_arc_arc.rs:200:13
    |
200 |             return ArcArcConfig::NoIntersection();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
200 -             return ArcArcConfig::NoIntersection();
200 +             ArcArcConfig::NoIntersection()
    |

warning: this `else { if .. }` block can be collapsed
   --> src/intersection/int_arc_arc.rs:128:24
    |
128 |                   } else {
    |  ________________________^
129 | |                     if arc0.a != arc1.b {
130 | |                         // Arc0 and Arc1 overlap, <B0,A0,B1,A1>.
131 | |                         let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
...   |
139 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
    = note: `#[warn(clippy::collapsible_else_if)]` on by default
help: collapse nested if block
    |
128 ~                 } else if arc0.a != arc1.b {
129 +                     // Arc0 and Arc1 overlap, <B0,A0,B1,A1>.
130 +                     let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
131 +                     return ArcArcConfig::CocircularOneArc2(res_arc0);
132 +                 } else {
133 +                     // Arc0 and arc1 share endpoint, <B0,A0,B1,A1>
134 +                     // with A0 = B1.
135 +                     let res_point0 = arc0.a;
136 +                     return ArcArcConfig::CocircularOnePoint0(res_point0);
137 +                 }
    |

warning: using `clone` on type `Arc` which implements the `Copy` trait
  --> src/intersection/int_arc_arc.rs:82:68
   |
82 | ...                   return ArcArcConfig::CocircularOneArc0(arc0.clone());
   |                                                              ^^^^^^^^^^^^ help: try dereferencing it: `*arc0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy
   = note: `#[warn(clippy::clone_on_copy)]` on by default

warning: unnecessary `!=` operation
   --> src/intersection/int_arc_arc.rs:85:29
    |
85  | / ...                   if arc0.a != arc1.b {
86  | | ...                       if arc1.a != arc0.b {
...   |
122 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
    |
85  ~                             if arc0.a == arc1.b {
86  +                                 // A0 = B1
87  +                                 if arc1.a != arc0.b {
88  +                                     // The intersection is a point {A0}
89  +                                     // and an arc <A1,B0>.
90  +                                     let res_point0 = arc0.a;
91  +                                     let res_arc0 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
92  +                                     return ArcArcConfig::CocircularOnePointOneArc1(
93  +                                         res_point0, res_arc0,
94  +                                     );
95  +                                 } else {
96  +                                     // The arcs shared endpoints, so the
97  +                                     // union is a circle.
98  +                                     let res_point0 = arc0.a;
99  +                                     let res_point1 = arc0.b;
100 +                                     return ArcArcConfig::CocircularTwoPoints(
101 +                                         res_point0, res_point1,
102 +                                     );
103 +                                 }
104 +                             } else {
105 +                                 if arc1.a != arc0.b {
106 +                                     // The arcs overlap in two disjoint
107 +                                     // subarcs, each of positive subtended
108 +                                     // angle: <A0,B1>, <A1,B0>
109 +                                     let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
110 +                                     let res_arc1 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
111 +                                     return ArcArcConfig::CocircularTwoArcs(res_arc0, res_arc1);
112 +                                 } else {
113 +                                     // B0 = A1
114 +                                     // The intersection is a point {A1}
115 +                                     // and an arc <A0,B1>.
116 +                                     let res_point0 = arc0.b;
117 +                                     let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
118 +                                     return ArcArcConfig::CocircularOnePointOneArc0(
119 +                                         res_point0, res_arc0,
120 +                                     );
121 +                                 }
122 +                             }
    |

warning: unnecessary `!=` operation
   --> src/intersection/int_arc_arc.rs:86:33
    |
86  | / ...                   if arc1.a != arc0.b {
...   |
101 | | ...                       );
102 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
    |
86  ~                                 if arc1.a == arc0.b {
87  +                                     // B0 = A1
88  +                                     // The intersection is a point {A1}
89  +                                     // and an arc <A0,B1>.
90  +                                     let res_point0 = arc0.b;
91  +                                     let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
92  +                                     return ArcArcConfig::CocircularOnePointOneArc0(
93  +                                         res_point0, res_arc0,
94  +                                     );
95  +                                 } else {
96  +                                     // The arcs overlap in two disjoint
97  +                                     // subarcs, each of positive subtended
98  +                                     // angle: <A0,B1>, <A1,B0>
99  +                                     let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
100 +                                     let res_arc1 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
101 +                                     return ArcArcConfig::CocircularTwoArcs(res_arc0, res_arc1);
102 +                                 }
    |

warning: unnecessary `!=` operation
   --> src/intersection/int_arc_arc.rs:105:33
    |
105 | / ...                   if arc1.a != arc0.b {
106 | | ...                       // The intersection is a point {A0}
107 | | ...                       // and an arc <A1,B0>.
108 | | ...                       let res_point0 = arc0.a;
...   |
120 | | ...                       );
121 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
    |
105 ~                                 if arc1.a == arc0.b {
106 +                                     // The arcs shared endpoints, so the
107 +                                     // union is a circle.
108 +                                     let res_point0 = arc0.a;
109 +                                     let res_point1 = arc0.b;
110 +                                     return ArcArcConfig::CocircularTwoPoints(
111 +                                         res_point0, res_point1,
112 +                                     );
113 +                                 } else {
114 +                                     // The intersection is a point {A0}
115 +                                     // and an arc <A1,B0>.
116 +                                     let res_point0 = arc0.a;
117 +                                     let res_arc0 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
118 +                                     return ArcArcConfig::CocircularOnePointOneArc1(
119 +                                         res_point0, res_arc0,
120 +                                     );
121 +                                 }
    |

warning: using `clone` on type `Arc` which implements the `Copy` trait
   --> src/intersection/int_arc_arc.rs:126:64
    |
126 |                         return ArcArcConfig::CocircularOneArc1(arc0.clone());
    |                                                                ^^^^^^^^^^^^ help: try dereferencing it: `*arc0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: unnecessary `!=` operation
   --> src/intersection/int_arc_arc.rs:129:21
    |
129 | /                     if arc0.a != arc1.b {
130 | |                         // Arc0 and Arc1 overlap, <B0,A0,B1,A1>.
131 | |                         let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
132 | |                         return ArcArcConfig::CocircularOneArc2(res_arc0);
...   |
137 | |                         return ArcArcConfig::CocircularOnePoint0(res_point0);
138 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
    |
129 ~                     if arc0.a == arc1.b {
130 +                         // Arc0 and arc1 share endpoint, <B0,A0,B1,A1>
131 +                         // with A0 = B1.
132 +                         let res_point0 = arc0.a;
133 +                         return ArcArcConfig::CocircularOnePoint0(res_point0);
134 +                     } else {
135 +                         // Arc0 and Arc1 overlap, <B0,A0,B1,A1>.
136 +                         let res_arc0 = arc(arc0.a, arc1.b, arc0.c, arc0.r);
137 +                         return ArcArcConfig::CocircularOneArc2(res_arc0);
138 +                     }
    |

warning: unnecessary `!=` operation
   --> src/intersection/int_arc_arc.rs:142:17
    |
142 | /                 if arc0.b != arc1.a {
143 | |                     // Arc0 and arc1 overlap in a single arc,
144 | |                     // <A0,B0,A1,B1>.
145 | |                     let res_arc0 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
...   |
151 | |                     return ArcArcConfig::CocircularOnePoint1(res_point0);
152 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
    |
142 ~                 if arc0.b == arc1.a {
143 +                     // Arc0 and arc1 share endpoint, <A0,B0,A1,B1>
144 +                     // with B0 = A1.
145 +                     let res_point0 = arc1.a;
146 +                     return ArcArcConfig::CocircularOnePoint1(res_point0);
147 +                 } else {
148 +                     // Arc0 and arc1 overlap in a single arc,
149 +                     // <A0,B0,A1,B1>.
150 +                     let res_arc0 = arc(arc1.a, arc0.b, arc0.c, arc0.r);
151 +                     return ArcArcConfig::CocircularOneArc3(res_arc0);
152 +                 }
    |

warning: this if-then-else expression returns a bool literal
   --> src/intersection/int_arc_arc.rs:206:5
    |
206 | /     if arc0.a == arc1.a || arc0.a == arc1.b || arc0.b == arc1.a || arc0.b == arc1.b {
207 | |         true
208 | |     } else {
209 | |         false
210 | |     }
    | |_____^ help: you can reduce it to: `arc0.a == arc1.a || arc0.a == arc1.b || arc0.b == arc1.a || arc0.b == arc1.b`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool

warning: this function could have a `#[must_use]` attribute
   --> src/intersection/int_arc_arc.rs:221:1
    |
221 | pub fn if_really_intersecting_arc_arc(arc0: &Arc, arc1: &Arc) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn if_really_intersecting_arc_arc(arc0: &Arc, arc1: &Arc) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: these match arms have identical bodies
   --> src/intersection/int_arc_arc.rs:223:9
    |
223 |         ArcArcConfig::NoIntersection() => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
224 |         ArcArcConfig::NonCocircularOnePoint(_) => true,
225 |         ArcArcConfig::NonCocircularOnePointTouching(_) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
226 |         ArcArcConfig::NonCocircularTwoPoints(_, _) => true,
227 |         ArcArcConfig::NonCocircularTwoPointsTouching(_, _) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
228 |         ArcArcConfig::CocircularOnePoint0(_) | ArcArcConfig::CocircularOnePoint1(_) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
229 |         ArcArcConfig::CocircularTwoPoints(_, _) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
223 ~         ArcArcConfig::NonCocircularOnePoint(_) => true,
224 ~         ArcArcConfig::NonCocircularTwoPoints(_, _) => true,
225 ~         ArcArcConfig::NoIntersection() | ArcArcConfig::NonCocircularOnePointTouching(_) | ArcArcConfig::NonCocircularTwoPointsTouching(_, _) | ArcArcConfig::CocircularOnePoint0(_) | ArcArcConfig::CocircularOnePoint1(_) | ArcArcConfig::CocircularTwoPoints(_, _) => false,
    |

warning: these match arms have identical bodies
   --> src/intersection/int_arc_arc.rs:224:9
    |
224 |           ArcArcConfig::NonCocircularOnePoint(_) => true,
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
225 |           ArcArcConfig::NonCocircularOnePointTouching(_) => false,
226 |           ArcArcConfig::NonCocircularTwoPoints(_, _) => true,
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
230 | /         ArcArcConfig::CocircularOnePointOneArc0(_, _)
231 | |         | ArcArcConfig::CocircularOnePointOneArc1(_, _) => true,
    | |_______________________________________________________________^
232 | /         ArcArcConfig::CocircularOneArc0(_)
233 | |         | ArcArcConfig::CocircularOneArc1(_)
234 | |         | ArcArcConfig::CocircularOneArc2(_)
235 | |         | ArcArcConfig::CocircularOneArc3(_)
236 | |         | ArcArcConfig::CocircularOneArc4(_)
237 | |         | ArcArcConfig::CocircularTwoArcs(_, _) => true,
    | |_______________________________________________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
224 ~         ArcArcConfig::NonCocircularOnePoint(_) | ArcArcConfig::NonCocircularTwoPoints(_, _) | ArcArcConfig::CocircularOnePointOneArc0(_, _)
225 +         | ArcArcConfig::CocircularOnePointOneArc1(_, _) | ArcArcConfig::CocircularOneArc0(_)
226 +         | ArcArcConfig::CocircularOneArc1(_)
227 +         | ArcArcConfig::CocircularOneArc2(_)
228 +         | ArcArcConfig::CocircularOneArc3(_)
229 +         | ArcArcConfig::CocircularOneArc4(_)
230 ~         | ArcArcConfig::CocircularTwoArcs(_, _) => true,
231 |         ArcArcConfig::NonCocircularOnePointTouching(_) => false,
232 ~         ArcArcConfig::NonCocircularTwoPointsTouching(_, _) => false,
233 |         ArcArcConfig::CocircularOnePoint0(_) | ArcArcConfig::CocircularOnePoint1(_) => false,
234 |         ArcArcConfig::CocircularTwoPoints(_, _) => false,
235 ~         }
    |

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_circle_circle.rs:54:1
   |
54 | pub fn int_circle_circle(circle0: Circle, circle1: Circle) -> CircleCircleConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_circle_circle(circle0: Circle, circle1: Circle) -> CircleCircleConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
   --> src/intersection/int_circle_circle.rs:105:17
    |
105 |                 return CircleCircleConfig::NoncocircularTwoPoints(p0, p1);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
105 -                 return CircleCircleConfig::NoncocircularTwoPoints(p0, p1);
105 +                 CircleCircleConfig::NoncocircularTwoPoints(p0, p1)
    |

warning: unneeded `return` statement
   --> src/intersection/int_circle_circle.rs:108:17
    |
108 |                 return CircleCircleConfig::NoncocircularOnePoint(p0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
108 -                 return CircleCircleConfig::NoncocircularOnePoint(p0);
108 +                 CircleCircleConfig::NoncocircularOnePoint(p0)
    |

warning: unneeded `return` statement
   --> src/intersection/int_circle_circle.rs:113:13
    |
113 |             return CircleCircleConfig::NoncocircularOnePoint(p0);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
113 -             return CircleCircleConfig::NoncocircularOnePoint(p0);
113 +             CircleCircleConfig::NoncocircularOnePoint(p0)
    |

warning: unneeded `return` statement
   --> src/intersection/int_circle_circle.rs:118:9
    |
118 |         return CircleCircleConfig::NoncocircularOnePoint(p0);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
118 -         return CircleCircleConfig::NoncocircularOnePoint(p0);
118 +         CircleCircleConfig::NoncocircularOnePoint(p0)
    |

warning: docs for function which may panic missing `# Panics` section
  --> src/intersection/int_interval_interval.rs:38:1
   |
38 | pub fn int_interval_interval(interval0: Interval, interval1: Interval) -> IntervalConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/intersection/int_interval_interval.rs:39:5
   |
39 |     assert!(interval0.0 <= interval0.1);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_interval_interval.rs:38:1
   |
38 | pub fn int_interval_interval(interval0: Interval, interval1: Interval) -> IntervalConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_interval_interval(interval0: Interval, interval1: Interval) -> IntervalConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/intersection/int_interval_interval.rs:42:9
   |
42 |         return IntervalConfig::NoOverlap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
42 -         return IntervalConfig::NoOverlap();
42 +         IntervalConfig::NoOverlap()
   |

warning: unneeded `return` statement
  --> src/intersection/int_interval_interval.rs:56:17
   |
56 |                 return IntervalConfig::Overlap(overlap0, overlap1);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
56 -                 return IntervalConfig::Overlap(overlap0, overlap1);
56 +                 IntervalConfig::Overlap(overlap0, overlap1)
   |

warning: unneeded `return` statement
  --> src/intersection/int_interval_interval.rs:59:17
   |
59 |                 return IntervalConfig::Overlap(overlap0, overlap0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
59 -                 return IntervalConfig::Overlap(overlap0, overlap0);
59 +                 IntervalConfig::Overlap(overlap0, overlap0)
   |

warning: unneeded `return` statement
  --> src/intersection/int_interval_interval.rs:63:13
   |
63 |             return IntervalConfig::Touching(interval0.0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
63 -             return IntervalConfig::Touching(interval0.0);
63 +             IntervalConfig::Touching(interval0.0)
   |

warning: unneeded `return` statement
  --> src/intersection/int_interval_interval.rs:67:9
   |
67 |         return IntervalConfig::Touching(interval0.1);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
67 -         return IntervalConfig::Touching(interval0.1);
67 +         IntervalConfig::Touching(interval0.1)
   |

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_line_arc.rs:39:1
   |
39 | pub fn int_line_arc(line: &Line, arc: &Arc) -> LineArcConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_line_arc(line: &Line, arc: &Arc) -> LineArcConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/intersection/int_line_arc.rs:44:13
   |
44 |             return LineArcConfig::NoIntersection();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
44 -             return LineArcConfig::NoIntersection();
44 +             LineArcConfig::NoIntersection()
   |

warning: unneeded `return` statement
  --> src/intersection/int_line_arc.rs:48:17
   |
48 |                 return LineArcConfig::OnePoint(p0, t0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
48 -                 return LineArcConfig::OnePoint(p0, t0);
48 +                 LineArcConfig::OnePoint(p0, t0)
   |

warning: unneeded `return` statement
  --> src/intersection/int_line_arc.rs:50:17
   |
50 |                 return LineArcConfig::NoIntersection();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
50 -                 return LineArcConfig::NoIntersection();
50 +                 LineArcConfig::NoIntersection()
   |

warning: unneeded `return` statement
  --> src/intersection/int_line_arc.rs:65:13
   |
65 |             return LineArcConfig::NoIntersection();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
65 -             return LineArcConfig::NoIntersection();
65 +             LineArcConfig::NoIntersection()
   |

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_line_circle.rs:37:1
   |
37 | pub fn int_line_circle(line_orig: &Line, circle: &Circle) -> LineCircleConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_line_circle(line_orig: &Line, circle: &Circle) -> LineCircleConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/intersection/int_line_circle.rs:55:9
   |
55 |         return LineCircleConfig::TwoPoints(point0, point1, parameter0, parameter1);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
55 -         return LineCircleConfig::TwoPoints(point0, point1, parameter0, parameter1);
55 +         LineCircleConfig::TwoPoints(point0, point1, parameter0, parameter1)
   |

warning: unneeded `return` statement
  --> src/intersection/int_line_circle.rs:57:9
   |
57 |         return LineCircleConfig::NoIntersection();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
57 -         return LineCircleConfig::NoIntersection();
57 +         LineCircleConfig::NoIntersection()
   |

warning: unneeded `return` statement
  --> src/intersection/int_line_circle.rs:66:9
   |
66 |         return LineCircleConfig::OnePoint(point0, parameter0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
66 -         return LineCircleConfig::OnePoint(point0, parameter0);
66 +         LineCircleConfig::OnePoint(point0, parameter0)
   |

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_line_line.rs:45:1
   |
45 | pub fn int_line_line(line0: &Line, line1: &Line) -> LineLineConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_line_line(line0: &Line, line1: &Line) -> LineLineConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/intersection/int_line_line.rs:55:9
   |
55 |         return LineLineConfig::OnePoint(p, s0, s1);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
55 -         return LineLineConfig::OnePoint(p, s0, s1);
55 +         LineLineConfig::OnePoint(p, s0, s1)
   |

warning: unneeded `return` statement
  --> src/intersection/int_line_line.rs:61:13
   |
61 |             return LineLineConfig::ParallelDistinct();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
61 -             return LineLineConfig::ParallelDistinct();
61 +             LineLineConfig::ParallelDistinct()
   |

warning: unneeded `return` statement
  --> src/intersection/int_line_line.rs:64:13
   |
64 |             return LineLineConfig::ParallelTheSame();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
64 -             return LineLineConfig::ParallelTheSame();
64 +             LineLineConfig::ParallelTheSame()
   |

warning: unnecessary `!=` operation
  --> src/intersection/int_line_line.rs:48:5
   |
48 | /     if dot_d0_perp_d1 != ZERO {
49 | |         // The lines are not parallel.
50 | |         let dot_qperp_d0 = q.perp(line0.dir);
51 | |         let dot_qperp_d1 = q.perp(line1.dir);
...  |
66 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
   |
48 ~     if dot_d0_perp_d1 == ZERO {
49 +         // The lines are parallel.
50 +         let dot_qperp_d1 = q.perp(line1.dir);
51 +         if dot_qperp_d1.abs() != ZERO {
52 +             // The lines are parallel but distinct.
53 +             return LineLineConfig::ParallelDistinct();
54 +         } else {
55 +             // The lines are the same.
56 +             return LineLineConfig::ParallelTheSame();
57 +         }
58 +     } else {
59 +         // The lines are not parallel.
60 +         let dot_qperp_d0 = q.perp(line0.dir);
61 +         let dot_qperp_d1 = q.perp(line1.dir);
62 +         let s0 = dot_qperp_d1 / dot_d0_perp_d1;
63 +         let s1 = dot_qperp_d0 / dot_d0_perp_d1;
64 +         let p = line0.origin + line0.dir * s0;
65 +         return LineLineConfig::OnePoint(p, s0, s1);
66 +     }
   |

warning: unnecessary `!=` operation
  --> src/intersection/int_line_line.rs:59:9
   |
59 | /         if dot_qperp_d1.abs() != ZERO {
60 | |             // The lines are parallel but distinct.
61 | |             return LineLineConfig::ParallelDistinct();
62 | |         } else {
63 | |             // The lines are the same.
64 | |             return LineLineConfig::ParallelTheSame();
65 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
help: try
   |
59 ~         if dot_qperp_d1.abs() == ZERO {
60 +             // The lines are the same.
61 +             return LineLineConfig::ParallelTheSame();
62 +         } else {
63 +             // The lines are parallel but distinct.
64 +             return LineLineConfig::ParallelDistinct();
65 +         }
   |

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_segment_arc.rs:40:1
   |
40 | pub fn int_segment_arc(segment: &Segment, arc: &Arc) -> SegmentArcConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_segment_arc(segment: &Segment, arc: &Arc) -> SegmentArcConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/intersection/int_segment_arc.rs:45:13
   |
45 |             return SegmentArcConfig::NoIntersection();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
45 -             return SegmentArcConfig::NoIntersection();
45 +             SegmentArcConfig::NoIntersection()
   |

warning: unneeded `return` statement
  --> src/intersection/int_segment_arc.rs:50:21
   |
50 |                     return SegmentArcConfig::OnePointTouching(p0, t0);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
50 -                     return SegmentArcConfig::OnePointTouching(p0, t0);
50 +                     SegmentArcConfig::OnePointTouching(p0, t0)
   |

warning: unneeded `return` statement
  --> src/intersection/int_segment_arc.rs:52:21
   |
52 |                     return SegmentArcConfig::OnePoint(p0, t0);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
52 -                     return SegmentArcConfig::OnePoint(p0, t0);
52 +                     SegmentArcConfig::OnePoint(p0, t0)
   |

warning: unneeded `return` statement
  --> src/intersection/int_segment_arc.rs:55:17
   |
55 |                 return SegmentArcConfig::NoIntersection();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
55 -                 return SegmentArcConfig::NoIntersection();
55 +                 SegmentArcConfig::NoIntersection()
   |

warning: unneeded `return` statement
  --> src/intersection/int_segment_arc.rs:82:13
   |
82 |             return SegmentArcConfig::NoIntersection();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
82 -             return SegmentArcConfig::NoIntersection();
82 +             SegmentArcConfig::NoIntersection()
   |

warning: this if-then-else expression returns a bool literal
  --> src/intersection/int_segment_arc.rs:88:5
   |
88 | /     if arc.a == segment.a || arc.a == segment.b || arc.b == segment.a || arc.b == segment.b {
89 | |         true
90 | |     } else {
91 | |         false
92 | |     }
   | |_____^ help: you can reduce it to: `arc.a == segment.a || arc.a == segment.b || arc.b == segment.a || arc.b == segment.b`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool

warning: this function could have a `#[must_use]` attribute
   --> src/intersection/int_segment_arc.rs:100:1
    |
100 | pub fn if_really_intersecting_segment_arc(segment: &Segment, arc: &Arc) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn if_really_intersecting_segment_arc(segment: &Segment, arc: &Arc) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_arc.rs:101:43
    |
101 |     let sc_res = int_segment_arc(segment, &arc);
    |                                           ^^^^ help: change this to: `arc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: these match arms have identical bodies
   --> src/intersection/int_segment_arc.rs:103:9
    |
103 |         SegmentArcConfig::NoIntersection() => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
104 |         SegmentArcConfig::OnePoint(_, _) => true,
105 |         SegmentArcConfig::OnePointTouching(_, _) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
106 |         SegmentArcConfig::TwoPoints(_, _, _, _) => true,
107 |         SegmentArcConfig::TwoPointsTouching(_, _, _, _) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
103 ~         SegmentArcConfig::OnePoint(_, _) => true,
104 ~         SegmentArcConfig::TwoPoints(_, _, _, _) => true,
105 ~         SegmentArcConfig::NoIntersection() | SegmentArcConfig::OnePointTouching(_, _) | SegmentArcConfig::TwoPointsTouching(_, _, _, _) => false,
    |

warning: these match arms have identical bodies
   --> src/intersection/int_segment_arc.rs:104:9
    |
104 |         SegmentArcConfig::OnePoint(_, _) => true,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
105 |         SegmentArcConfig::OnePointTouching(_, _) => false,
106 |         SegmentArcConfig::TwoPoints(_, _, _, _) => true,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
104 ~         SegmentArcConfig::OnePoint(_, _) | SegmentArcConfig::TwoPoints(_, _, _, _) => true,
105 |         SegmentArcConfig::OnePointTouching(_, _) => false,
106 ~         SegmentArcConfig::TwoPointsTouching(_, _, _, _) => false,
    |

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_segment_circle.rs:36:1
   |
36 | pub fn int_segment_circle(seg: &Segment, circle: &Circle) -> SegmentCircleConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_segment_circle(seg: &Segment, circle: &Circle) -> SegmentCircleConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unneeded `return` statement
  --> src/intersection/int_segment_circle.rs:40:47
   |
40 |         LineCircleConfig::NoIntersection() => return SegmentCircleConfig::NoIntersection(),
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
40 -         LineCircleConfig::NoIntersection() => return SegmentCircleConfig::NoIntersection(),
40 +         LineCircleConfig::NoIntersection() => SegmentCircleConfig::NoIntersection(),
   |

warning: unneeded `return` statement
  --> src/intersection/int_segment_circle.rs:45:17
   |
45 |                 return SegmentCircleConfig::OnePoint(p0, param0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
45 -                 return SegmentCircleConfig::OnePoint(p0, param0);
45 +                 SegmentCircleConfig::OnePoint(p0, param0)
   |

warning: unneeded `return` statement
  --> src/intersection/int_segment_circle.rs:47:17
   |
47 |                 return SegmentCircleConfig::NoIntersection();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
47 -                 return SegmentCircleConfig::NoIntersection();
47 +                 SegmentCircleConfig::NoIntersection()
   |

warning: unneeded `return` statement
  --> src/intersection/int_segment_circle.rs:64:13
   |
64 |             return SegmentCircleConfig::NoIntersection();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
64 -             return SegmentCircleConfig::NoIntersection();
64 +             SegmentCircleConfig::NoIntersection()
   |

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_segment_point.rs:12:1
   |
12 | pub fn int_segment_point(_segment0: &Segment, _point1: &Point) -> SegmentPointConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_segment_point(_segment0: &Segment, _point1: &Point) -> SegmentPointConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/intersection/int_segment_segment.rs:50:1
   |
50 | pub fn int_segment_segment(segment0: &Segment, segment1: &Segment) -> SegmentSegmentConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn int_segment_segment(segment0: &Segment, segment1: &Segment) -> SegmentSegmentConfig`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function has too many lines (109/100)
   --> src/intersection/int_segment_segment.rs:50:1
    |
50  | / pub fn int_segment_segment(segment0: &Segment, segment1: &Segment) -> SegmentSegmentConfig {
51  | |     let (seg0_origin, seg0_direction, seg0_extent) = segment0.get_centered_form();
52  | |     let (seg1_origin, seg1_direction, seg1_extent) = segment1.get_centered_form();
...   |
173 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:127:47
    |
127 |         LineLineConfig::ParallelDistinct() => return SegmentSegmentConfig::NoIntersection(),
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
127 -         LineLineConfig::ParallelDistinct() => return SegmentSegmentConfig::NoIntersection(),
127 +         LineLineConfig::ParallelDistinct() => SegmentSegmentConfig::NoIntersection(),
    |

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:134:21
    |
134 |                     return SegmentSegmentConfig::OnePointTouching(p, s0, s1);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
134 -                     return SegmentSegmentConfig::OnePointTouching(p, s0, s1);
134 +                     SegmentSegmentConfig::OnePointTouching(p, s0, s1)
    |

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:136:21
    |
136 |                     return SegmentSegmentConfig::OnePoint(p, s0, s1);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
136 -                     return SegmentSegmentConfig::OnePoint(p, s0, s1);
136 +                     SegmentSegmentConfig::OnePoint(p, s0, s1)
    |

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:139:17
    |
139 |                 return SegmentSegmentConfig::NoIntersection();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
139 -                 return SegmentSegmentConfig::NoIntersection();
139 +                 SegmentSegmentConfig::NoIntersection()
    |

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:152:48
    |
152 |                 IntervalConfig::NoOverlap() => return SegmentSegmentConfig::NoIntersection(),
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
152 -                 IntervalConfig::NoOverlap() => return SegmentSegmentConfig::NoIntersection(),
152 +                 IntervalConfig::NoOverlap() => SegmentSegmentConfig::NoIntersection(),
    |

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:162:25
    |
162 |                         return SegmentSegmentConfig::NoIntersection(); // TODO: fix this
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
162 -                         return SegmentSegmentConfig::NoIntersection(); // TODO: fix this
162 +                         SegmentSegmentConfig::NoIntersection()// TODO: fix this
    |

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:164:25
    |
164 |                         return SegmentSegmentConfig::TwoPoints(p0, p1, p2, p3);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
164 -                         return SegmentSegmentConfig::TwoPoints(p0, p1, p2, p3);
164 +                         SegmentSegmentConfig::TwoPoints(p0, p1, p2, p3)
    |

warning: unneeded `return` statement
   --> src/intersection/int_segment_segment.rs:168:21
    |
168 |                     return SegmentSegmentConfig::NoIntersection(); // TODO: fix this
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
168 -                     return SegmentSegmentConfig::NoIntersection(); // TODO: fix this
168 +                     SegmentSegmentConfig::NoIntersection()// TODO: fix this
    |

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:133:38
    |
133 |                 if are_ends_towching(&segment0, &segment1) {
    |                                      ^^^^^^^^^ help: change this to: `segment0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:133:49
    |
133 |                 if are_ends_towching(&segment0, &segment1) {
    |                                                 ^^^^^^^^^ help: change this to: `segment1`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:156:47
    |
156 |                     if are_both_ends_towching(&segment0, &segment1) {
    |                                               ^^^^^^^^^ help: change this to: `segment0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:156:58
    |
156 |                     if are_both_ends_towching(&segment0, &segment1) {
    |                                                          ^^^^^^^^^ help: change this to: `segment1`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:161:42
    |
161 |                     if are_ends_towching(&segment0, &segment1) {
    |                                          ^^^^^^^^^ help: change this to: `segment0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:161:53
    |
161 |                     if are_ends_towching(&segment0, &segment1) {
    |                                                     ^^^^^^^^^ help: change this to: `segment1`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this if-then-else expression returns a bool literal
   --> src/intersection/int_segment_segment.rs:176:5
    |
176 | /     if segment0.a == segment1.a
177 | |         || segment0.a == segment1.b
178 | |         || segment0.b == segment1.a
179 | |         || segment0.b == segment1.b
...   |
183 | |         false
184 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool
help: you can reduce it to
    |
176 ~     segment0.a == segment1.a
177 +         || segment0.a == segment1.b
178 +         || segment0.b == segment1.a || segment0.b == segment1.b
    |

warning: this function could have a `#[must_use]` attribute
   --> src/intersection/int_segment_segment.rs:195:1
    |
195 | pub fn if_really_intersecting_segment_segment(part0: &Segment, part1: &Segment) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn if_really_intersecting_segment_segment(part0: &Segment, part1: &Segment) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: these match arms have identical bodies
   --> src/intersection/int_segment_segment.rs:197:9
    |
197 |         SegmentSegmentConfig::NoIntersection() => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
198 |         SegmentSegmentConfig::OnePoint(_, _, _) => true,
199 |         SegmentSegmentConfig::OnePointTouching(_, _, _) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
200 |         SegmentSegmentConfig::TwoPoints(_, _, _, _) => true,
201 |         SegmentSegmentConfig::TwoPointsTouching(_, _, _, _) => false,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
197 ~         SegmentSegmentConfig::OnePoint(_, _, _) => true,
198 ~         SegmentSegmentConfig::TwoPoints(_, _, _, _) => true,
199 ~         SegmentSegmentConfig::NoIntersection() | SegmentSegmentConfig::OnePointTouching(_, _, _) | SegmentSegmentConfig::TwoPointsTouching(_, _, _, _) => false,
    |

warning: these match arms have identical bodies
   --> src/intersection/int_segment_segment.rs:198:9
    |
198 |         SegmentSegmentConfig::OnePoint(_, _, _) => true,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |         SegmentSegmentConfig::OnePointTouching(_, _, _) => false,
200 |         SegmentSegmentConfig::TwoPoints(_, _, _, _) => true,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
198 ~         SegmentSegmentConfig::OnePoint(_, _, _) | SegmentSegmentConfig::TwoPoints(_, _, _, _) => true,
199 |         SegmentSegmentConfig::OnePointTouching(_, _, _) => false,
200 ~         SegmentSegmentConfig::TwoPointsTouching(_, _, _, _) => false,
    |

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:196:31
    |
196 |     match int_segment_segment(&part0, &part1) {
    |                               ^^^^^^ help: change this to: `part0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/intersection/int_segment_segment.rs:196:39
    |
196 |     match int_segment_segment(&part0, &part1) {
    |                                       ^^^^^^ help: change this to: `part1`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: docs for function which may panic missing `# Panics` section
  --> src/svg.rs:52:5
   |
52 |     pub fn new(xsize: f64, ysize: f64, file: &str) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/svg.rs:54:13
   |
54 |             File::create("/tmp/out.svg").expect("creation failed")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: this method could have a `#[must_use]` attribute
  --> src/svg.rs:52:5
   |
52 |     pub fn new(xsize: f64, ysize: f64, file: &str) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(xsize: f64, ysize: f64, file: &str) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function could have a `#[must_use]` attribute
  --> src/svg.rs:81:1
   |
81 | pub fn svg(xsize: f64, ysize: f64) -> SVG {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn svg(xsize: f64, ysize: f64) -> SVG`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: docs for function which may panic missing `# Panics` section
   --> src/svg.rs:90:5
    |
90  |     pub fn write_stroke_width(&mut self, stroke_width: f64) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/svg.rs:108:9
    |
108 |         self.f.write_all(header.as_bytes()).expect("write failed");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: calling `push_str()` using a single-character string literal
   --> src/svg.rs:102:9
    |
102 |         header.push_str("\n");
    |         ^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `header.push('\n')`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str
    = note: `#[warn(clippy::single_char_add_str)]` on by default

warning: calling `push_str()` using a single-character string literal
   --> src/svg.rs:123:9
    |
123 |         self.s.push_str("\n");
    |         ^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `self.s.push('\n')`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str

warning: calling `push_str()` using a single-character string literal
   --> src/svg.rs:138:9
    |
138 |         self.s.push_str("\n");
    |         ^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `self.s.push('\n')`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str

warning: calling `push_str()` using a single-character string literal
   --> src/svg.rs:154:9
    |
154 |         self.s.push_str("\n");
    |         ^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `self.s.push('\n')`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str

warning: boolean to int conversion using if
   --> src/svg.rs:177:30
    |
177 |         let large_arc_flag = if orient2d(pa, pb, pc) < 0.0 { 1 } else { 0 };
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `i32::from(orient2d(pa, pb, pc) < 0.0)`
    |
    = note: `(orient2d(pa, pb, pc) < 0.0) as i32` or `(orient2d(pa, pb, pc) < 0.0).into()` can also be valid options
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if
    = note: `-W clippy::bool-to-int-with-if` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::bool_to_int_with_if)]`

warning: calling `push_str()` using a single-character string literal
   --> src/svg.rs:194:9
    |
194 |         self.s.push_str("\n");
    |         ^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `self.s.push('\n')`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str

warning: docs for function which may panic missing `# Panics` section
   --> src/svg.rs:212:5
    |
212 |     pub fn polyline(&mut self, pline: &Polyline, color: &str) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/svg.rs:220:18
    |
220 |         let p0 = pline.last().unwrap();
    |                  ^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> src/svg.rs:224:41
    |
224 |     pub fn polylines(&mut self, plines: &Vec<Polyline>, color: &str) {
    |                                         ^^^^^^^^^^^^^^ help: change this to: `&[Polyline]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> src/svg.rs:225:18
    |
225 |         for p in plines.iter() {
    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `plines`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> src/svg.rs:248:18
    |
248 |         for s in offs.iter() {
    |                  ^^^^^^^^^^^ help: to write this more concisely, try: `offs`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> src/svg.rs:253:59
    |
253 |     pub fn offset_segments_single_points(&mut self, offs: &Vec<Arc>, color: &str) {
    |                                                           ^^^^^^^^^ help: change this to: `&[Arc]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> src/svg.rs:254:18
    |
254 |         for s in offs.iter() {
    |                  ^^^^^^^^^^^ help: to write this more concisely, try: `offs`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> src/svg.rs:259:38
    |
259 |     pub fn arclines(&mut self, offs: &Vec<Arcline>, color: &str) {
    |                                      ^^^^^^^^^^^^^ help: change this to: `&[Arcline]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> src/svg.rs:260:18
    |
260 |         for s in offs.iter() {
    |                  ^^^^^^^^^^^ help: to write this more concisely, try: `offs`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: `basegeom` (lib) generated 287 warnings (run `cargo clippy --fix --lib -p basegeom` to apply 236 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.03s
